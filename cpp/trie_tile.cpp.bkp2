#include <iostream>
#include <queue>
#include <vector>
#include <ctime>

using namespace std;

#define NUM_ENTRIES         10
#define THRESHOLD_WEIGHT    500

typedef struct entry_info_ {
    int prefix_len;
    int weight;
} entry_info_t;

entry_info_t entry_arr[NUM_ENTRIES];

struct comparator {
    bool operator() ( const entry_info_t &i, const entry_info_t &j) {
        return (i.weight < j.weight);
    }
};

int main(int argc, char *argv[])
{
    srand(time(0));

    priority_queue<entry_info_t, std::vector<entry_info_t>, comparator> max_heap;

    for (int ent_num = 0; ent_num < NUM_ENTRIES; ent_num++) {
        entry_arr[ent_num].prefix_len = rand() % 32;
        entry_arr[ent_num].weight = rand() % 3000;
        max_heap.push(entry_arr[ent_num]);
    }

    while(!max_heap.empty()) {
        cout << "prefix_len: " << max_heap.top().prefix_len << "\t weight: " << max_heap.top().weight << endl;
        max_heap.pop();
    }

    return 0;
}
