#!/usr/bin/python

import sys
import collections
from decimal import Decimal

f = open('input', 'r')

lines = f.readlines()

nv = 0
ne = 0
d = {}
for line in lines:
    if ne == 0:
        nv,ne = line.split(' ')
    else:
        u,v,e = map(int, line.split(' '))
        if u not in d.keys():
            d[u] = {}
            d[u]['ud'] = {}
        if e not in d[u]['ud'].keys():
            d[u]['ud'][e] = []
        d[u]['ud'][e].append(v) 
        d[u]['od'] = collections.OrderedDict(sorted(d[u]['ud'].items()))

def find_smallest_cut(pd):
    le_key = Decimal('Infinity')

    # we need to explore a new edge per iter
    # v cannot point to an existing vertex already explored
    for u in pd.keys():
        for e in d[u]['od'].keys():
            if v in pd.keys():
                print "v", v in "pd.keys", pd.keys()
                del d[u]['od'][le_key]

    for u in pd.keys():
        print "1. u: ", u, "pd.keys: ", pd.keys()
        #print "2. ", d[u]
        if d[u]['od'].keys()[0] < le_key:
            le_u = u
            le_key = d[le_u]['od'].keys()[0]

            # for this le get first v from the list of (u, v1) or (u, v2) ...
            v = d[le_u]['od'][le_key][0]

            # we need to explore a new edge per iter
            # v cannot point to an existing vertex already explored
            if v in pd.keys():
                print "2: v: ", v, "is in pd.keys"
                del d[le_u]['od'][le_key]
                print "3: remaining in le_u: ", le_u, "keys: ", d[le_u]['od']
                le_key = Decimal('Infinity')
                if d[u]['od'].keys()[0] is not None:
                    le_key = d[le_u]['od'].keys()[0]
                continue
            #print "3. ", le_key
    #print "4. ", le_key, le_u
    #print "5. ", d[le_u]
    v       = d[le_u]['od'][le_key][0]
    #print "6. ", le_u, v, le_key
    return le_u, v, le_key

i = 1
count = 0
pd = {}
# add i to pd
pd[i] = [] 
while (count < nv): 
    u, v, le_key    = find_smallest_cut(pd)
    pd[u]           = [ v, le_key ]
    if v not in pd.keys():
        # add v to pd
        pd[v] = [] 
    print "7: ", u, v, le_key, " pd.keys: ", pd.keys()
    count = count + 1

'''
def find_smallest_cut(pd):
    le_key = Decimal('Infinity')
    for u in pd.keys():
        print "1. u: ", u, "pd.keys: ", pd.keys()
        #print "2. ", d[u]
        if d[u]['od'].keys()[0] < le_key:
            le_u = u
            le_key = d[le_u]['od'].keys()[0]

            # for this le get first v from the list of (u, v1) or (u, v2) ...
            v = d[le_u]['od'][le_key][0]

            # we need to explore a new edge per iter
            # v cannot point to an existing vertex already explored
            if v in pd.keys():
                print "2: v: ", v, "is in pd.keys"
                del d[le_u]['od'][le_key]
                print "3: remaining in le_u: ", le_u, "keys: ", d[le_u]['od']
                le_key = Decimal('Infinity')
                if d[u]['od'].keys()[0] is not None:
                    le_key = d[le_u]['od'].keys()[0]
                continue
            #print "3. ", le_key
    #print "4. ", le_key, le_u
    #print "5. ", d[le_u]
    v       = d[le_u]['od'][le_key][0]
    #print "6. ", le_u, v, le_key
    return le_u, v, le_key
'''
