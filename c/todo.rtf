{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 Georgia;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl416

\f0\fs20 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You should know the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quicksort is impractical, so take a look at it.\
For God's sake, don't try sorting a linked list during the interview.\
\
You 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 absolutely have to know how they work
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . Again, it's like one chapter in one data structures book, so just go read about them. You should be able to implement one using only arrays in your favorite language, in about the space of one interview\
\
You should be familiar with binary trees, n-ary trees, and trie-trees at the very 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 very
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  least. Trees are probably the best source of practice problems for your long-term warmup exercises.\
You should be familiar with at least one flavor of balanced binary tree, whether it's a red/black tree, a splay tree or an AVL tree. You should actually know how it's implemented.\
You should know about tree traversal algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.\
\
There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list), and you should familiarize yourself with each representation and its pros and cons.\
You should know the basic graph traversal algorithms: breadth-first search and depth-first search. You should know their computational complexity, their tradeoffs, and how to implement them in real code.\
You should try to study up on fancier algorithms, such as Dijkstra and A*, if you get a chance. \
\
\
You should especially know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, and be able to recognize them when an interviewer asks you them in disguise.\
You should find out what NP-complete means.\
\
know about processes, threads and concurrency issues\
Know about locks and mutexes and semaphores and monitors and how they work. Know about deadlock and livelock and how to avoid them. Know what resources a processes needs, and a thread needs, and how context switching works, and how it's initiated by the operating system and underlying hardware. Know a little about scheduling. The world is rapidly moving towards multi-core, and you'll be a dinosaur in a real hurry if you don't understand the fundamentals of "modern" (which is to say, "kinda broken") concurrency constructs.\
\
\
\
}